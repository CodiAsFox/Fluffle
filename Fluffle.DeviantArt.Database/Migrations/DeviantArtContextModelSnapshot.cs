// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Noppes.Fluffle.DeviantArt.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Noppes.Fluffle.DeviantArt.Database.Migrations
{
    [DbContext(typeof(DeviantArtContext))]
    partial class DeviantArtContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("en_US.utf8")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Noppes.Fluffle.DeviantArt.Database.Entities.Deviant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("GalleryScrapedWhen")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("gallery_scraped_when");

                    b.Property<string>("IconLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon_location");

                    b.Property<bool?>("IsFurryArtist")
                        .HasColumnType("boolean")
                        .HasColumnName("is_furry_artist");

                    b.Property<DateTime?>("IsFurryArtistDeterminedWhen")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("is_furry_artist_determined_when");

                    b.Property<DateTime?>("IsFurryArtistEnqueuedWhen")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("is_furry_artist_enqueued_when");

                    b.Property<DateTime>("JoinedWhen")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("joined_when");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_deviant");

                    b.HasIndex("IsFurryArtist")
                        .HasDatabaseName("idx_deviant_is_furry_artist");

                    b.ToTable("deviant");
                });

            modelBuilder.Entity("Noppes.Fluffle.DeviantArt.Database.Entities.Deviation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("deviant_id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_deviation");

                    b.HasIndex("DeviantId")
                        .HasDatabaseName("idx_deviation_deviant_id");

                    b.ToTable("deviation");
                });

            modelBuilder.Entity("Noppes.Fluffle.DeviantArt.Database.Entities.Deviation", b =>
                {
                    b.HasOne("Noppes.Fluffle.DeviantArt.Database.Entities.Deviant", "Deviant")
                        .WithMany("Deviations")
                        .HasForeignKey("DeviantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deviant");

                    b.Navigation("Deviant");
                });

            modelBuilder.Entity("Noppes.Fluffle.DeviantArt.Database.Entities.Deviant", b =>
                {
                    b.Navigation("Deviations");
                });
#pragma warning restore 612, 618
        }
    }
}
